pipeline {
    agent { label 'aws' }
    environment {
        TOKENAWS = credentials('controller-ssh-key')
        TEST_RESULT_FILE = 'test_result.txt' // File to store test result
    }
    stages {
        stage('Deploy to Testing') {
            steps {
                sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@44.197.176.212 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo rm -Rf /var/www/html/; sudo git clone https://github.com/BMKa00/Exam /var/www/html"'
            }
        }
        
        stage('Run Selenium Tests in Testing') {
            steps {
                script {
                    try {
                        // Install Selenium WebDriver
                        sh 'npm install selenium-webdriver'

                        // Run Selenium test and capture output
                        def output = sh(script: 'node trainingExercise/test1.js', returnStdout: true).trim()

                        // Print test output to Jenkins console
                        echo "Selenium Test Output (Testing): ${output}"

                        // Write test result to a file
                        writeFile file: TEST_RESULT_FILE, text: output

                        // Determine build status based on test outcome
                        if (output.contains('Test Success')) {
                            currentBuild.result = 'SUCCESS'
                        } else {
                            currentBuild.result = 'FAILURE'
                        }
                    } catch (Exception e) {
                        echo "Selenium test execution failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error('Selenium test execution failed')
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@34.200.214.2 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo rm -Rf /var/www/html/; sudo git clone https://github.com/BMKa00/Exam /var/www/html"'
            }
        }
        
        stage('Deploy to Production_Env1') {
            steps {
                sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@54.211.245.127 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo rm -Rf /var/www/html/; sudo git clone https://github.com/BMKa00/Exam /var/www/html"'
            }
        }
        
        stage('Deploy to Production_Env2') {
            steps {
                sh 'ssh -T -oStrictHostKeyChecking=no -i "$TOKENAWS" ec2-user@3.239.222.199 "sudo dnf update; sudo dnf install git -y; sudo dnf install -y httpd; sudo systemctl start httpd; sudo rm -Rf /var/www/html/; sudo git clone https://github.com/BMKa00/Exam /var/www/html"'
            }
        }
    }
}